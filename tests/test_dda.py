from unittest import TestCase
from dda_funcs import *
import numpy
__author__ = 'Kryosugarra'


class TestDDA(TestCase):
    def test_C_abs(self):
        alph = 1.0e-04 *numpy.asarray([
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j])
        k = 6.283185307179586
        E0 = numpy.asarray([1, 1, 0])
        Ei = numpy.asarray([
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j,
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j,
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j,
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j])
        P = 1.0e-04 * numpy.asarray([
            0.9612 - 0.0050j,
            0.9612 - 0.0050j,
            0.0309 + 0.0807j,
            0.7006 + 0.7360j,
            0.7006 + 0.7360j,
            -0.0864 - 0.0141j,
            0.8944 - 0.0400j,
            0.8944 - 0.0400j,
            -0.0000 - 0.0000j,
            0.6501 + 0.6763j,
            0.6501 + 0.6763j,
            -0.0000 - 0.0000j,
            0.8944 - 0.0400j,
            0.8944 - 0.0400j,
            -0.0000 - 0.0000j,
            0.6501 + 0.6763j,
            0.6501 + 0.6763j,
            0.0000 + 0.0000j,
            0.9612 - 0.0050j,
            0.9612 - 0.0050j,
            -0.0309 - 0.0807j,
            0.7006 + 0.7360j,
            0.7006 + 0.7360j,
            0.0864 + 0.0141j])
        x = C_abs(k, E0, Ei, P, alph)
        if not numpy.abs(x - 0.0174) < 0.001:
            self.fail()

    def test_C_ext(self):
        k = 6.283185307179586
        E0 = numpy.asarray([1, 1, 0])
        Ei = numpy.asarray([
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j,
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j,
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j,
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j])
        P = 1.0e-04 * numpy.asarray([
            0.9612 - 0.0050j,
            0.9612 - 0.0050j,
            0.0309 + 0.0807j,
            0.7006 + 0.7360j,
            0.7006 + 0.7360j,
            -0.0864 - 0.0141j,
            0.8944 - 0.0400j,
            0.8944 - 0.0400j,
            -0.0000 - 0.0000j,
            0.6501 + 0.6763j,
            0.6501 + 0.6763j,
            -0.0000 - 0.0000j,
            0.8944 - 0.0400j,
            0.8944 - 0.0400j,
            -0.0000 - 0.0000j,
            0.6501 + 0.6763j,
            0.6501 + 0.6763j,
            0.0000 + 0.0000j,
            0.9612 - 0.0050j,
            0.9612 - 0.0050j,
            -0.0309 - 0.0807j,
            0.7006 + 0.7360j,
            0.7006 + 0.7360j,
            0.0864 + 0.0141j])
        x = C_ext(k, E0, Ei, P)
        if not numpy.abs(x - 0.0230) < 0.001:
            self.fail()

    def test_cross_C(self):
        vec = numpy.asarray([1, 2, 3])
        a = cross_C(vec)
        a_exp = numpy.asarray([
            [0, -3, 2],
            [3, 0, -1],
            [-2, 1, 0]
        ])

        if not (a == a_exp).all():
            self.fail()

    def test_E_inc(self):
        k = 6.283185307179586
        E0 = numpy.asarray([1, 1, 0])
        kvec = [0, 0, k]

        r = numpy.asarray([
            [-0.0597,   -0.0597,   -0.0597],
            [-0.0597,   -0.0597,    0.0597],
            [-0.0597,    0.0597,   -0.0597],
            [-0.0597,    0.0597,    0.0597],
            [0.0597,   -0.0597,   -0.0597],
            [0.0597,   -0.0597,    0.0597],
            [0.0597,    0.0597,   -0.0597],
            [0.0597,    0.0597,    0.0597]
            ])

        Ei_exp = numpy.asarray([
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j,
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j,
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j,
            0.9306 - 0.3662j,
            0.9306 - 0.3662j,
            0.0000 + 0.0000j,
            0.9306 + 0.3662j,
            0.9306 + 0.3662j,
            0.0000 + 0.0000j])

        Ei = E_inc(E0, kvec, r)


        if not (numpy.abs(Ei - Ei_exp) < 0.001).all():
            print(numpy.abs(Ei - Ei_exp))
            self.fail()

    def test_calc_Aj(self):
        #
        # Test 2
        #
        alph = 1.0e-04 *numpy.asarray([
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j])
        k = 6.283185307179586
        j = 0
        blockdiag = 1

        r = numpy.asarray([
            [0,   0,   0],
            [1,   1,    1]
            ])


        Aj_exp = numpy.asarray([
            [10614.7014265967 - 3193.37990597579j,	0.00000000000000 + 0.00000000000000j,	0.00000000000000 + 0.00000000000000j,	1.71006105686162 + 15.0987189646511j,	1.24771766013322 - 7.59383349109870j,	1.24771766013322 - 7.59383349109870j],
            [0.00000000000000 + 0.00000000000000j,	10614.7014265967 - 3193.37990597579j,	0.00000000000000 + 0.00000000000000j,	1.24771766013322 - 7.59383349109870j,	1.71006105686162 + 15.0987189646511j,	1.24771766013322 - 7.59383349109870j],
            [0.00000000000000 + 0.00000000000000j,	0.00000000000000 + 0.00000000000000j,	10614.7014265967 - 3193.37990597579j,	1.24771766013322 - 7.59383349109870j,	1.24771766013322 - 7.59383349109870j,	1.71006105686162 + 15.0987189646511j],
        ])

        Aj = calc_Aj(k, r, alph, j, blockdiag)

        if not (numpy.abs(Aj - Aj_exp) < 0.001).all():
            print(numpy.abs(Aj - Aj_exp))
            self.fail()

        #
        # Test 2
        #
        alph = 1.0e-04 *numpy.asarray([
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j])
        k = 6.283185307179586
        j = 0
        blockdiag = 1

        r = numpy.asarray([[0,   0,   0],
                            [1,   1,    1],
                            [-1,    -1,   -1]])


        Aj_exp = numpy.asarray([
            [10614.7014265967 - 3193.37990597579j,	0.00000000000000 + 0.00000000000000j,	0.00000000000000 + 0.00000000000000j,	1.71006105686162 + 15.0987189646511j,	1.24771766013322 - 7.59383349109870j,	1.24771766013322 - 7.59383349109870j,	1.71006105686162 + 15.0987189646511j,	1.24771766013322 - 7.59383349109870j,	1.24771766013322 - 7.59383349109870j],
            [0.00000000000000 + 0.00000000000000j,	10614.7014265967 - 3193.37990597579j,	0.00000000000000 + 0.00000000000000j,	1.24771766013322 - 7.59383349109870j,	1.71006105686162 + 15.0987189646511j,	1.24771766013322 - 7.59383349109870j,	1.24771766013322 - 7.59383349109870j,	1.71006105686162 + 15.0987189646511j,	1.24771766013322 - 7.59383349109870j],
            [0.00000000000000 + 0.00000000000000j,	0.00000000000000 + 0.00000000000000j,	10614.7014265967 - 3193.37990597579j,	1.24771766013322 - 7.59383349109870j,	1.24771766013322 - 7.59383349109870j,	1.71006105686162 + 15.0987189646511j,	1.24771766013322 - 7.59383349109870j,	1.24771766013322 - 7.59383349109870j,	1.71006105686162 + 15.0987189646511j],
        ])

        Aj = calc_Aj(k, r, alph, j, blockdiag)

        if not (numpy.abs(Aj - Aj_exp) < 0.001).all():
            self.fail()

    def test_interaction_A(self):
        alph = 1.0e-04 *numpy.asarray([
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j,
            0.8639 + 0.2599j])

        k = 6.283185307179586
        blockdiag = 1

        r = numpy.asarray([[0,   0,   0],
                            [1,   1,    1]])

        A_exp = numpy.asarray([
            [10614.70 - 3193.380j,	0.000000 + 0.000000j,	0.000000 + 0.000000j,	1.710061 + 15.09872j,	1.247718 - 7.593833j,	1.247718 - 7.593833j],
            [0.000000 + 0.000000j,	10614.70 - 3193.380j,	0.000000 + 0.000000j,	1.247718 - 7.593833j,	1.710061 + 15.09872j,	1.247718 - 7.593833j],
            [0.000000 + 0.000000j,	0.000000 + 0.000000j,	10614.70 - 3193.380j,	1.247718 - 7.593833j,	1.247718 - 7.593833j,	1.710061 + 15.09872j],
            [1.710061 + 15.09872j,	1.247718 - 7.593833j,	1.247718 - 7.593833j,	10614.70 - 3193.380j,	0.000000 + 0.000000j,	0.000000 + 0.000000j],
            [1.247718 - 7.593833j,	1.710061 + 15.09872j,	1.247718 - 7.593833j,	0.000000 + 0.000000j,	10614.70 - 3193.380j,	0.000000 + 0.000000j],
            [1.247718 - 7.593833j,	1.247718 - 7.593833j,	1.710061 + 15.09872j,	0.000000 + 0.000000j,	0.000000 + 0.000000j,	10614.70 - 3193.380j]
        ])

        A = interaction_A(k, r, alph, blockdiag)

        if not (numpy.abs(A - A_exp) < 0.0012).all():
            print(numpy.abs(A - A_exp))
            self.fail()



    def test_E_inc_vswf(self):
        self.fail()

    def test_E_sca_FF(self):
        k = 6.283185307179586
        P = numpy.asarray([
            8.81460705883819e-05 - 2.85224736997501e-05j,
            3.69106899543797e-06 - 1.87596682467080e-07j,
            3.58903823121609e-06 + 2.62284052969094e-06j,
            8.75820126759164e-05 + 4.78264909627074e-05j,
            3.68160269437733e-06 + 1.23431230590055e-06j,
            -3.78363350590105e-06 + 1.57612509344399e-06j,
            8.81460328021913e-05 - 2.85224592048316e-05j,
            -3.69106986549143e-06 + 1.87597210180722e-07j,
            3.58903782497286e-06 + 2.62284061875806e-06j,
            8.75820134591842e-05 + 4.78264898358523e-05j,
            -3.68160277122829e-06 - 1.23431256395649e-06j,
            -3.78363355413506e-06 + 1.57612498359051e-06j,
            8.81460410139222e-05 - 2.85224611310089e-05j,
            -3.69107012419789e-06 + 1.87597067389693e-07j,
            -3.58903797268349e-06 - 2.62284094500973e-06j,
            8.75820184944987e-05 + 4.78264838410059e-05j,
            -3.68160289742478e-06 - 1.23431270280851e-06j,
            3.78363520780647e-06 - 1.57612528745679e-06j,
            8.81460351221719e-05 - 2.85224595049775e-05j,
            3.69106987781236e-06 - 1.87597248922948e-07j,
            -3.58903819217515e-06 - 2.62284088131637e-06j,
            8.75820159351649e-05 + 4.78264776641933e-05j,
            3.68160394820506e-06 + 1.23431262353497e-06j,
            3.78363423211837e-06 - 1.57612498234861e-06j
        ])
        r = numpy.asarray([
            [-0.0597,   -0.0597,   -0.0597],
            [-0.0597,   -0.0597,    0.0597],
            [-0.0597,    0.0597,   -0.0597],
            [-0.0597,    0.0597,    0.0597],
            [0.0597,   -0.0597,   -0.0597],
            [0.0597,   -0.0597,    0.0597],
            [0.0597,    0.0597,   -0.0597],
            [0.0597,    0.0597,    0.0597]
            ])
        r_E = numpy.asarray([0, 0, 100])

        E_exp = [-3.0238e-05 -2.8682e-05j, 1.5140e-13 - 2.9974e-13j, 0.0 + 0.0j]

        E = E_sca_FF(k, r, P, r_E)

        if not (numpy.abs(E_exp - E) < 0.001).all():
            self.fail()

